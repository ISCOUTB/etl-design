services:
  rabbitmq:
    image: rabbitmq:4-management
    container_name: etl-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"  # Management UI
    volumes:
      - typechecking_rabbitmq_data:/var/lib/rabbitmq

  mongodb:
    image: mongo:7
    container_name: etl-mongodb
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - typechecking_mongodb_data:/data/db

  postgresdb:
    image: postgres:17
    container_name: etl-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - typechecking_postgresdb_data:/var/lib/postgresql/data

  redisdb:
    image: redis:7.4.1
    container_name: etl-redis
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - typechecking_redisdb_data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  workers:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python -m app.workers.worker_manager
    depends_on:
      - rabbitmq
      - mongodb
      - postgresdb
      - redisdb
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: rabbitmq
      MONGO_HOST: mongodb
      REDIS_HOST: redisdb
    deploy:
      replicas: ${WORKER_CONCURRENCY}

  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: etl-typechecking-api
    depends_on:
      - rabbitmq
      - mongodb
      - postgresdb
      - redisdb
      - workers
    env_file:
      - .env
    environment:
      RABBITMQ_HOST: rabbitmq
      MONGO_HOST: mongodb
      REDIS_HOST: redisdb
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/${API_V1_STR}/healthcheck"]
      interval: 60s
      timeout: 10s
      retries: 5

volumes:
  typechecking_rabbitmq_data:
  typechecking_mongodb_data:
  typechecking_postgresdb_data:
  typechecking_redisdb_data:
