// source: dtypes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.dtypes.AST');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

goog.forwardDeclare('proto.dtypes.AstType');
goog.forwardDeclare('proto.dtypes.RefType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dtypes.AST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dtypes.AST.repeatedFields_, null);
};
goog.inherits(proto.dtypes.AST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dtypes.AST.displayName = 'proto.dtypes.AST';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dtypes.AST.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dtypes.AST.prototype.toObject = function(opt_includeInstance) {
  return proto.dtypes.AST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dtypes.AST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dtypes.AST.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    operator: jspb.Message.getFieldWithDefault(msg, 2, ""),
    left: (f = msg.getLeft()) && proto.dtypes.AST.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.dtypes.AST.toObject(includeInstance, f),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.dtypes.AST.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reftype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    key: jspb.Message.getFieldWithDefault(msg, 8, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dtypes.AST}
 */
proto.dtypes.AST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dtypes.AST;
  return proto.dtypes.AST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dtypes.AST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dtypes.AST}
 */
proto.dtypes.AST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dtypes.AstType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperator(value);
      break;
    case 3:
      var value = new proto.dtypes.AST;
      reader.readMessage(value,proto.dtypes.AST.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 4:
      var value = new proto.dtypes.AST;
      reader.readMessage(value,proto.dtypes.AST.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    case 5:
      var value = new proto.dtypes.AST;
      reader.readMessage(value,proto.dtypes.AST.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {!proto.dtypes.RefType} */ (reader.readEnum());
      msg.setReftype(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dtypes.AST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dtypes.AST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dtypes.AST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dtypes.AST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dtypes.AST.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dtypes.AST.serializeBinaryToWriter
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.dtypes.AST.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!proto.dtypes.RefType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional AstType type = 1;
 * @return {!proto.dtypes.AstType}
 */
proto.dtypes.AST.prototype.getType = function() {
  return /** @type {!proto.dtypes.AstType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dtypes.AstType} value
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string operator = 2;
 * @return {string}
 */
proto.dtypes.AST.prototype.getOperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.setOperator = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearOperator = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasOperator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AST left = 3;
 * @return {?proto.dtypes.AST}
 */
proto.dtypes.AST.prototype.getLeft = function() {
  return /** @type{?proto.dtypes.AST} */ (
    jspb.Message.getWrapperField(this, proto.dtypes.AST, 3));
};


/**
 * @param {?proto.dtypes.AST|undefined} value
 * @return {!proto.dtypes.AST} returns this
*/
proto.dtypes.AST.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AST right = 4;
 * @return {?proto.dtypes.AST}
 */
proto.dtypes.AST.prototype.getRight = function() {
  return /** @type{?proto.dtypes.AST} */ (
    jspb.Message.getWrapperField(this, proto.dtypes.AST, 4));
};


/**
 * @param {?proto.dtypes.AST|undefined} value
 * @return {!proto.dtypes.AST} returns this
*/
proto.dtypes.AST.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasRight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated AST arguments = 5;
 * @return {!Array<!proto.dtypes.AST>}
 */
proto.dtypes.AST.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.dtypes.AST>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dtypes.AST, 5));
};


/**
 * @param {!Array<!proto.dtypes.AST>} value
 * @return {!proto.dtypes.AST} returns this
*/
proto.dtypes.AST.prototype.setArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.dtypes.AST=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dtypes.AST}
 */
proto.dtypes.AST.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.dtypes.AST, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.dtypes.AST.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.setName = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearName = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasName = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RefType refType = 7;
 * @return {!proto.dtypes.RefType}
 */
proto.dtypes.AST.prototype.getReftype = function() {
  return /** @type {!proto.dtypes.RefType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.dtypes.RefType} value
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.setReftype = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearReftype = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasReftype = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string key = 8;
 * @return {string}
 */
proto.dtypes.AST.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearKey = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasKey = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float value = 9;
 * @return {number}
 */
proto.dtypes.AST.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dtypes.AST} returns this
 */
proto.dtypes.AST.prototype.clearValue = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dtypes.AST.prototype.hasValue = function() {
  return jspb.Message.getField(this, 9) != null;
};


